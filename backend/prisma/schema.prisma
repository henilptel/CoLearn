generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(uuid())
  email           String        @unique @db.VarChar(100)
  password        String        @db.VarChar(255)
  name            String        @db.VarChar(100)
  location        String?       @db.VarChar(255)
  bio             String?
  experience_years      Int     @default(0)
  profilePhoto    String?       @db.VarChar(500)
  isPublic        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isActive        Boolean       @default(true)
  googleAccessToken     String?   @db.Text
  googleRefreshToken    String?   @db.Text
  googleTokenExpiryDate DateTime?
  ratingsGiven    Rating[]      @relation("RatingGiver")
  ratingsReceived Rating[]      @relation("RatingReceiver")
  swapReceived    SwapRequest[] @relation("SwapReceiver")
  swapRequests    SwapRequest[] @relation("SwapRequester")
  timeSlots       TimeSlot[]
  skillsOffered   Skill[]       @relation("SkillsOffered")
  skillsWanted    Skill[]       @relation("SkillsWanted")

  @@map("users")
  meetingBookingsRequested MeetingBooking[] @relation("MeetingRequester")
  meetingBookingsReceived MeetingBooking[] @relation("MeetingReceiver")
}

model Skill {
  id            String        @id @default(uuid())
  name          String        @db.VarChar(100)
  description   String
  category      SkillCategory
  usersOffering User[]        @relation("SkillsOffered")
  usersWanting  User[]        @relation("SkillsWanted")

  @@map("skills")
}

model SwapRequest {
  id          String            @id @default(uuid())
  requesterId String
  receiverId  String
  message     String?
  status      SwapRequestStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  receiver    User              @relation("SwapReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  requester   User              @relation("SwapRequester", fields: [requesterId], references: [id], onDelete: Cascade)

  @@map("swap_requests")
  MeetingBooking MeetingBooking[]
}

model Rating {
  id         String   @id @default(uuid())
  rating     Int      @db.SmallInt
  feedback   String
  giverId    String
  receiverId String
  createdAt  DateTime @default(now())
  giver      User     @relation("RatingGiver", fields: [giverId], references: [id], onDelete: Cascade)
  receiver   User     @relation("RatingReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([giverId, receiverId])
  @@map("ratings")
}

model TimeSlot {
  id     String @id @default(uuid())
  day    Day
  from   String
  to     String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_slots")
  MeetingBooking MeetingBooking[]
}

model Session {
  id        String   @id @default(uuid())
  sid       String   @unique @db.VarChar(255)
  data      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model MeetingBooking {
  id           String      @id @default(uuid())
  swapRequest  SwapRequest @relation(fields: [swapRequestId], references: [id], onDelete: Cascade)
  swapRequestId String
  timeSlot     TimeSlot    @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  timeSlotId   String
  requester    User        @relation("MeetingRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  requesterId  String
  receiver     User        @relation("MeetingReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId   String
  meetingLink  String?     @db.VarChar(500)
  status       MeetingStatus @default(SCHEDULED)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("meeting_bookings")
}

enum MeetingStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

enum SwapRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum SkillCategory {
  TECHNOLOGY
  DESIGN
  LANGUAGE
  MUSIC
  BUSINESS
  COOKING
  FITNESS
  CRAFTS
  PHOTOGRAPHY
  WRITING
  TUTORING
  LIFESTYLE
  AUTOMOTIVE
  HOME_IMPROVEMENT
  GARDENING
  OTHER
}
